services:
  db:
    image: postgres:16
    container_name: my_postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: mydb
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mydb"]
      interval: 10s
      retries: 5
    volumes:
      - pg_data:/var/lib/postgresql/data

  migrate:
    image: migrate/migrate:v4.15.2
    depends_on:
      db:
        condition:  service_healthy
    command: ["-path", "/migrations", "-database", "postgres://admin:secret@db:5432/mydb?sslmode=disable", "up"]
    volumes:
      - ./migrations:/migrations
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    depends_on:
      db:
        condition:  service_healthy
      migrate:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      retries: 5
  redis:
    image: redis:7
    container_name: redis-cache
    ports:
      - "127.0.0.1:6379:6379"
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: ["redis-server", "--requirepass", "secret"]

  api:
    build:
      context: .
      dockerfile: cmd/api_service/Dockerfile
    container_name: api-service
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      DB_HOST: db
      DB_USER: admin
      DB_PASSWORD: secret
      DB_NAME: mydb
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:8080/api/v1/health || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s
    env_file: [ ".env.api_service" ]
    restart: always

  notification-service:
    build:
      context: .
      dockerfile: cmd/notification_service/Dockerfile
    container_name: notification-service
    depends_on:
      api:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "127.0.0.1:8081:8081"
    env_file: [ ".env.notification_service" ]
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:8081/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: always
  scheduler-service:
    build:
      context: .
      dockerfile: cmd/scheduler_service/Dockerfile
    container_name: scheduler-service
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_healthy
    ports:
      - "127.0.0.1:8082:8082"
    env_file: [ ".env.scheduler" ]
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:8082/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: always

  prometheus:
    profiles:
      - monitoring
    image: prom/prometheus
    volumes:
      - prometheus-data:/prometheus
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '127.0.0.1:9090:9090'

  grafana:
    profiles:
      - monitoring
    image: grafana/grafana
    ports:
      - '127.0.0.1:3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards

volumes:
  pg_data:
  redis-data:
  grafana-storage:
  prometheus-data:
